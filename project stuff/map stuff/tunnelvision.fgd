//====== Original FGD is Copyright © 1996-2005, Valve Corporation, All rights reserved. =======
//
// Purpose: Tunnel Vision game definition file (.fgd) 
//
//=============================================================================

@include "base.fgd"


@PointClass base(Targetname, Angles, Parentname, EnableDisable) studio("models/tunnelvision/io_models/io_default.mdl") = sent_tv_io_power : "A constant source of power for the IO." 
[
	state(integer) : "State" : 1 : "The initial IO state of the entity."
]


@PointClass base(Targetname, Angles, Parentname) studio("models/tunnelvision/io_models/io_default.mdl") = sent_tv_io_system : "An entity that fires outputs based on its input." 
[
	state(integer) : "State" : 0 : "The initial IO state of the entity."

	is_on(choices) : "Is On" : 0 : "Used to set the starting state of the system (Used to prevent outputs on world spawn)." =
	[
		0 : "No"
		1 : "Yes"
	]

	// Outputs
	output OnLowToHigh(void) : "Fires when the input changes from low to high (rising edge trigger)"
	output OnHighToLow(void) : "Fires when the input changes from high to low (falling edge trigger)"
]


@PointClass base(Targetname, Angles, Parentname) studio("models/tunnelvision/io_models/io_default.mdl") = sent_tv_io_through : "An entity that exists purely to act as a point for cables to connect to." 
[
	state(integer) : "State" : 0 : "The initial IO state of the entity."
]


@PointClass base(Targetname, Angles, Parentname) studio("models/tunnelvision/io_models/io_default.mdl") = sent_tv_io_cable : "An entity that connects an output of one entity to an input of another."
[
	high(choices) : "High" : 0 : "Used to set the starting state of the cable (Used to prevent outputs on world spawn)." =
	[
		0 : "No"
		1 : "Yes"
	]

	InputEntity(target_destination) : "Input Entity" : "" : "Name of the entity that will give the signal to this cable."
	OutputEntity(target_destination) : "Output Entity" : "" : "Name of the entity that will receive the signal from this cable."
	
	InputID(integer) : "Input ID" : 1 : "The Output ID of the input entity. Ranges from 1 through 8."
	OutputID(integer) : "Output ID" : 1 : "The Input ID of the output entity. Ranges from 1 through 8."
]


@PointClass base(Targetname, Angles, Parentname) studio("models/tunnelvision/io_models/io_default.mdl") = sent_tv_io_indicator : "An entity that lights up whenever its input is high."
[
	state(integer) : "State" : 0 : "The initial IO state of the entity."
]


@PointClass base(Targetname, Angles, Parentname) studio("models/tunnelvision/io_models/io_default.mdl") = sent_tv_io_button : "An entity that allows the player to control the flow of the input signal between two outputs, but only while using it."
[
	state(integer) : "State" : 0 : "The initial IO state of the entity. Should probably be either 0 or 5."
]


@PointClass base(Targetname, Angles, Parentname) studio("models/tunnelvision/io_models/io_switch.mdl") = sent_tv_io_switch : "An entity that allows the player to toggle the flow of the input signal between two outputs."
[
	state(integer) : "State" : 0 : "The initial IO state of the entity."

	is_on(choices) : "Is On" : 0 : "Used to set the starting state of the switch." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	// Outputs
	output OnSwitchedOn(void) : "Fires when the switch is moved to the on position."
	output OnSwitchedOff(void) : "Fires when the switch is moved to the off position."
	output OnSwitchedOnHasPower(void) : "Fires when the switch is moved to the on position and power is moving through."
	output OnSwitchedOnHasNoPower(void) : "Fires when the switch is moved to the on position but power is not moving through."
	output OnSwitchedOffHasPower(void) : "Fires when the switch is moved to the off position and power is moving through."
	output OnSwitchedOffHasNoPower(void) : "Fires when the switch is moved to the off position but power is not moving through."
	output OnSwitchChange(void) : "Fires when the switch position is changed, regardless of the outcome."
	output OnChange(void) : "Fires when the state of the switch changes (inputs and/or outputs)."
]


@PointClass base(Targetname, Angles, Parentname) studio("models/tunnelvision/io_models/io_relay.mdl") = sent_tv_io_relay : "An entity that uses one signal to control the flow of another input signal between two outputs."
[
	state(integer) : "State" : 0 : "The initial IO state of the entity."

	is_on(choices) : "Is On" : 0 : "Used to set the starting state of the relay." =
	[
		0 : "No"
		1 : "Yes"
	]
]


@PointClass base(Targetname, Angles, Parentname) studio("models/tunnelvision/io_models/io_default.mdl") = sent_tv_io_capacitor : "An entity that can store/lose charge over time. The output is high when a threshold is passed."
[
	state(integer) : "State" : 0 : "The initial IO state of the entity."

	charge(integer) : "Charge" : 0 : "The amount of charge is starts out with."
	threshold(integer) : "Threshold" : 60 : "How much charge it needs before the output becomes high."
	maximum(integer) : "Maximum" : 90 : "The maximum amount of charge."
]


@PointClass base(Targetname, Angles, Parentname) studio("models/tunnelvision/io_models/io_telephone.mdl") = sent_tv_io_telephone : "A rotary phone. Used by IO systems."
[
	state(integer) : "State" : 0 : "The initial IO state of the entity."
	is_on(choices) : "Is On" : 0 : "Used to set the starting state of the relay." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	// Outputs
	output OnSwitchedOn(void) : "Fires when the phone is lifted off the hook."
	output OnSwitchedOff(void) : "Fires when the phone is placed onto the hook."
	output OnSwitchedOnHasPower(void) : "Fires when the phone is lifted off the hook and power can now move through."
	output OnSwitchedOnHasNoPower(void) : "Fires when the phone is lifted off the hook but power can not move through."
	output OnSwitchedOffHasPower(void) : "Fires when the phone is placed onto the hook and power was moving through."
	output OnSwitchedOffHasNoPower(void) : "Fires when the phone is placed onto the hook and power was not moving through."
	output OnSwitchChange(void) : "Fires when the phone is either lifted from or placed onto the hook, regardless of the outcome."
	output OnChange(void) : "Fires when the state of the phone changes (inputs and/or outputs)."
]


@PointClass base(Targetname, Angles, Parentname) studio("models/tunnelvision/io_models/io_default.mdl") = sent_tv_io_steppingswitch : "A switch meant to be used with rotary phones."
[
	state(integer) : "State" : 0 : "The initial IO state of the entity."
	step_pos(choices) : "Step Pos" : 0 : "Used to set the starting step position of the switch." =
	[
		0 : "None"
		1 : "1"
		2 : "2"
		3 : "3"
		4 : "4"
		5 : "5"
		6 : "6"
		7 : "7"
		8 : "8"
		9 : "9"
		10 : "0"
	]
	charged(choices) : "Is Charged" : 0 : "Used to set if the charge is already set." =
	[
		0 : "No"
		1 : "Yes"
	]
	locked(choices) : "Is Locked" : 0 : "Used to set if the stepper switch is already locked into a position." =
	[
		0 : "No"
		1 : "Yes"
	]
]


@PointClass base(Targetname, Angles, Parentname, EnableDisable) studio("models/props_interiors/lights_florescent01a.mdl") = sent_tv_florescent_light : "A light that turns on and off occasionally." 
[
]


@PointClass base(Targetname, Angles, Parentname) studio("models/tunnelvision/misc/tv_label.mdl") = sent_tv_label : "An entity for labelling stuff for the player to read." 
[
	message(string) : "Message" : "TODO" : "The message to show on the label. DON'T EVER USE DOUBLE QUOTES!"
	editable(choices) : "Editable" : 0 : "Should the player be allowed to edit this label?" =
	[
		0 : "No"
		1 : "Yes"
	]
	pickupable(choices) : "Pickupable" : 0 : "Should the player be allowed to pick up this label?" =
	[
		0 : "No"
		1 : "Yes"
	]
]


@PointClass base(Targetname, Angles, Parentname) studio("models/tunnelvision/misc/tv_stickynote.mdl") = sent_tv_stickynote : "An entity for leaving notes for the player to read." 
[
	message(string) : "Message" : "TODO" : "The message to show on the note. Use forwardslash+n to indicate new lines. DON'T EVER USE DOUBLE QUOTES!"
	editable(choices) : "Editable" : 0 : "Should the player be allowed to edit this note?" =
	[
		0 : "No"
		1 : "Yes"
	]
	pickupable(choices) : "Pickupable" : 0 : "Should the player be allowed to pick up this note?" =
	[
		0 : "No"
		1 : "Yes"
	]
]


@PointClass base(Targetname, Angles, Parentname) = sent_tv_fly : "Buzz." 
[
]


@PointClass base(Targetname, Angles, Parentname) = sent_tv_living_corpse : "A nasty, living corpse." 
[
]


@PointClass base(Targetname, Angles, Parentname) studio("models/gman_high.mdl") = snpc_weeping_gman : "The game's main antagonist." 
[
]


@PointClass base(Targetname, Angles, Parentname) = snpc_tv_rat : "A rat." 
[
]


@PointClass base(Targetname, Angles, Parentname) studio("models/gman_high.mdl") = sent_tv_twg_home : "A home location for The Weeping Gman." 
[
]


@PointClass base(Targetname) = sent_tv_objective: "An objective for the player to complete." 
[
	message(string) : "Message" : "TODO" : "A short description of the objective. DON'T EVER USE DOUBLE QUOTES!"
	known(choices) : "Starts known?" : 0 : "Does the player know about this objective when the map spawns?" =
	[
		0 : "No"
		1 : "Yes"
	]
	total_known(choices) : "Total starts known?" : 1 : "Does the player know how many things are needed for this objective when the map spawns?" =
	[
		0 : "No"
		1 : "Yes"
	]
	total_done(integer) : "Total done." : 0 : "How many of the things for this objective are already done when the map spawns."
	total_needed(integer) : "Total needed." : 1 : "How many of the things are needed for this objective to become complete."
	must_be_known_to_complete(choices) : "Must be known to complete?" : 1 : "Must the player know about this objective before they can complete it?" =
	[
		0 : "No"
		1 : "Yes"
	]
	status(choices) : "Starting status." : 0 : "What is the status of this objective when the map spawns?" =
	[
		0 : "Incomplete"
		1 : "Complete"
	]
	
	// Inputs
	input BecomeKnown(void) : "If not already, the objective becomes known."
	input TotalBecomeKnown(void) : "If not already, the objective's total becomes known."
	input SetTotal(integer) : "Receives an integer and sets the total for the objective to it."
	
	// Outputs
	output OnBecomeKnown(void) : "Fires when the objective becomes known."
	output OnTotalBecomeKnown(void) : "Fires when the total for the objective becomes known."
	output OnStatusComplete(void) : "Fires when the status changes to complete."
	output OnStatusIncomplete(void) : "Fires when the status changes to incomplete."
	output OnStatusChange(void) : "Fires when the status changes."
	output OnTotalChange(void) : "Fires when the total changes."
	output OnChange(void) : "Fires after anything changes."
]


@PointClass base(Targetname) = sent_tv_message: "An object for sending messages to the player." 
[
	// Inputs
	input ShowMessage(string) : "Shows the given message to the player. DON'T EVER USE DOUBLE QUOTES!"
]


@PointClass base(Targetname) = sent_tv_prop_teleporter: "A tool for placing props at random locations (until I can get nav place names, damn it!)" 
[
	prop_name(target_destination) : "Prop name" : "" : "Name of the entities to be teleported."
	target_name(target_destination) : "Target name" : "" : "Name of the entities that will be used as locations to teleport to."
	
	// Inputs
	input TeleportProps(string) : "Shows the given message to the player. DON'T EVER USE DOUBLE QUOTES!"
]